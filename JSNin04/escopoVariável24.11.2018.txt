Escopo de Variável:

- GLOBAL

- LOCAL

Escopo é o local aonde declaramos uma variável.
-Sempre que declaramos uma variável fora de função, essa
variável está sendo declarada no escopo global.
-Caso eu declare dentro de uma função eu crio 
uma variável no escopo local.

FUNCION cria escopo local
variável dentro de function, será uma 
variável que não se pode ter acesso por fora da function

quando se cria uma variável fora de uma function, estamos
criando ela no escopo global ( ou seja, de qualquer lugar podemos acessar
aquela variável)

> var myvar = 1;
undefined
> myvar;
1
> function myFunction(){
return myvar;
}
> myFunction();
1
Sempre que criamos uma variável no
escopo global podemos acessá-las dentro de 
escopos locais.

> function otherFunction(){
var otherVar = true;
return otherVar;
}

A variável otherVar foi criada em uma função ela vai passar a aparece a partir
do momento em que ela é invocada.

>otherFunction();
true

>otherVar
is not defined

otherVar não existe fora da função

Outra vantagem de utilizarmos o escopo Local ao invez do escopo Global
é que o JavaScript tem algo chamado garbage colect, que é coleta de lixo que 
funciona mais ou menos assim, quando você cria uma variável dentro do escopo local
ela só vai ficar disponível dentro daquele escopo, ela só vai aparecer quando executarmos a 
função, então o quando o JS for fazer a leitura e interpretação do código, ele irá saber que
a partir do momento em que aquela função for chamada e ela não for usada mais a variável em lugar algum,
ele simplesmente elimina da memória o espaço que a variável estava ocupando.
Logo não fica lixo na memória.
Isso funciona tanto com funções, variáveis, objetos e tudo que ele saiba que não irá usar depois.

IMPORTANTE
- sempre use var para declarar uma variável 

Podemos criar variáveis sem usar o var, porém o JS entende que 
você está criando aquela variável no escopo Global, ao invéz de 
criar no escopo Local, ainda que se crie a variável dentro daquela 
função.

> function newFunction(){
newVar = 'variavel global';
return newVar;
}
> newVar;
newVar is not defined
> newFunction();
'variavel global'
>newVar
'variavel global'

Como não utuilizamos acima o var para criar
o objeto, o escopo se tornou global, então o JS
não irá conseguir utilizar o garbage colector,
podemos ter conflito de nomes com outras variáveis,
podemos fazer com que ela ocupe muita memória e utilize
muito recurso do navegador.

ARGUMENTOS DE FUNÇÃO
Os argumentos de função também são locais.

> function outraFuncao(a,b,c){
  return a;
}

> outraFuncao(1);
1
> outraFuncao(1,2);
1
> a
a is not defined

Estes argumentos são locais.