FUNÇÕES

retorno de funções indo além dos tipos PRIMITIVO

PODEMOS RETORNAR NÚMEROS

function myFunction(){
	return 1;
}

PODEMOS RETORNAR strings
function myFunction(){
	return 'string';
}

PODEMOS RETORNAR valores boleanos
function myFunction(){
	return true;
}

PODEMOS RETORNAR null
function myFunction(){
	return null;
}

PODEMOS RETORNAR undefined
function myFunction(){
}

Todos estes são valores primitivos.
Porém no JS podemos retornar outros tipos de objetos.

PODEMOS RETORNAR ARRAY de NÚMEROS
function myFunction(){
	return [1,2,3];
}

A vantagem é que podemos acessar as propriedades deste array.

> myFunction()[0]
1
> myFunction()[1]
2
> myFunction()[2]
3

- Após executar função podemos chamar o índice do array que queremos pegar.

Podemos retornar objetos.
function myFunction(){
	return{
	prop1: 1,
	prop2: 'thalita',
	prop3: function(){
	return 'prop3';
	}
    }
}


> myFunction()
{	prop1: 1,
	prop2: 'thalita',
	prop3: [function] }

Não há necessidade criar uma variavel ou um objeto no escopo global para trabalharmos, podemos criar um escopo dentro de
uma função e usarmos o retorno da função como um objeto com propriedade e métodos.


> myFunction().prop1
undefined

> var values = myFunction();
> values
{	prop1: 1,
	prop2: 'thalita',
	prop3: [function] }

> value.prop2
'thalita'

> value.prop3;
[Function]

> value.prop3(); (ele traz o retorno do método solicitado)
'prop3'

