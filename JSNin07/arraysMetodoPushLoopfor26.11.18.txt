Arrays - método  push()  e Loop  for


Método push serve para adicionar um ítem no final do array.

> var arr = [1,2,3,'thalita, {banana:'estragada}];

>arr.length
5

>arr[0]
1

>arr[1]
2

>arr[2]
3

>arr[3]
'thalita'

>arr[4]
{ bola: azul }

>arr[5]
undefined

>arr[4].bola
'azul'

Digamos que existe a necessodade de acionar mais um ítem ao array.
Temos duas formas de fazer isso, uma delas é reescrever todo array.

> var arr = [1,2,3,'thalita, {banana:'estragada},['la','la2','la3']];

>arr.lenght
6

>arr
[1,2,3,'thalita, {banana:'estragada},['la','la2','la3']];

MÉTODO PUSH()

arr.push(); (eu vou empurrar um valor para dentro do array);

> arr.push({carro:'BMW'});

>arr.lenght
7

> arr
[1,
 2,
 3,
 'thalita, 
 {banana:'estragada},
 ['la','la2','la3'],
 {carro:'BMW'}];

>arr[5][1]
'la2'

>arr[6].carro
'BMW'
----------------------------------------
> arr.push(function soma(x,y){return x+y});

>arr
> arr
[1,
 2,
 3,
 'thalita, 
 {banana:'estragada},
 ['la','la2','la3'],
 {carro:'BMW'}
 [FUNCTION: soma]]


> arr[7](1,2)
3

- Isso é um exemplo de programação funcional, poder passar uma função como parâmetro de outro método.

Podemos adicionar qualquer tipo de valor.

> arr.push(null);

> arr.push([1,2,3]);


ESTRUTURA DE REPETIÇÃO FOR

Ele tem basicamente a mesma ideia do while, gerar uma estrutura de repetição.
Mas possui uma sitaxe um pouco diferente.

Parâmetros do FOR
1º - INICIALIZADOR
2º - CONDIÇÃO
3º - EXPRESSÃO FINAL

for( init; condition; final-expression)

ex.


while(num < 20){
console.log(num++);
}

OS 3 PARÂMETROS SÃO SEPARADOS POR ;

for( var num = 0; num < 20; num++){
	console.log(num);
	}


for( var num = 2, arroz = 3;num <5; num++){
	console.log(num);
	console.log(arroz++);	
}

